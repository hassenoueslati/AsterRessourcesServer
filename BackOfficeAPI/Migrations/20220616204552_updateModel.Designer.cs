// <auto-generated />
using System;
using BackOfficeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackOfficeAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220616204552_updateModel")]
    partial class updateModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackOfficeAPI.Models.Condidature", b =>
                {
                    b.Property<int>("OffreFK")
                        .HasColumnType("integer");

                    b.Property<int>("CandidatFK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCondidature")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Etat")
                        .HasColumnType("integer");

                    b.Property<int?>("PartinenceProfil")
                        .HasColumnType("integer");

                    b.Property<bool?>("ProfileInteressant")
                        .HasColumnType("boolean");

                    b.HasKey("OffreFK", "CandidatFK");

                    b.HasIndex("CandidatFK");

                    b.ToTable("Condidatures");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Offre", b =>
                {
                    b.Property<int>("OffreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OffreId"));

                    b.Property<int>("AdminFK")
                        .HasColumnType("integer");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Etat")
                        .HasColumnType("integer");

                    b.Property<int[]>("Proffesions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OffreId");

                    b.HasIndex("AdminFK");

                    b.ToTable("Offres");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Admin", b =>
                {
                    b.HasBaseType("BackOfficeAPI.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Candidat", b =>
                {
                    b.HasBaseType("BackOfficeAPI.Models.User");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int[]>("Proffesions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("Telephone")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Candidat");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.SuperAdmin", b =>
                {
                    b.HasBaseType("BackOfficeAPI.Models.User");

                    b.HasDiscriminator().HasValue("SuperAdmin");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Condidature", b =>
                {
                    b.HasOne("BackOfficeAPI.Models.Candidat", "Candidat")
                        .WithMany("Condidatures")
                        .HasForeignKey("CandidatFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackOfficeAPI.Models.Offre", "Offre")
                        .WithMany("Condidatures")
                        .HasForeignKey("OffreFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidat");

                    b.Navigation("Offre");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Offre", b =>
                {
                    b.HasOne("BackOfficeAPI.Models.Admin", "Admin")
                        .WithMany("Offres")
                        .HasForeignKey("AdminFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Offre", b =>
                {
                    b.Navigation("Condidatures");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Admin", b =>
                {
                    b.Navigation("Offres");
                });

            modelBuilder.Entity("BackOfficeAPI.Models.Candidat", b =>
                {
                    b.Navigation("Condidatures");
                });
#pragma warning restore 612, 618
        }
    }
}
